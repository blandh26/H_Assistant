<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JinianNet.JNTemplate</name>
    </assembly>
    <members>
        <member name="T:JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions">
            <summary>
            Provides the cache options for an entry in <see cref="T:JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions"/>
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions.AbsoluteExpiration">
            <summary>
            Gets or sets an absolute expiration date for the cache entry.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions.AbsoluteExpirationRelativeToNow">
            <summary>
            Gets or sets an absolute expiration time, relative to now.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions.SlidingExpiration">
            <summary>
            Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed. This will not extend the entry lifetime beyond the absolute  expiration (if set).
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Caching.ICache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Caching.ICache.Count">
            <summary>
            The count of the cache item.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds the cache item.
            </summary>
            <param name="key">The key of the cache.</param>
            <param name="value">The value of the cache.</param>
            <param name="expire">The expiration</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Get``1(System.String)">
            <summary>
            Gets a object of the specify key.
            </summary>
            <typeparam name="T">The type of the return.</typeparam>
            <param name="key">The key of the cache.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Clear">
            <summary>
            Clear all cached objects 
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Caching.IDistributedCache`1">
            <summary>
            Represents a distributed cache of <typeparamref name="TCacheItem" /> type.
            </summary>
            <typeparam name="TCacheItem">The type of cache item being cached.</typeparam>
        </member>
        <member name="T:JinianNet.JNTemplate.Caching.IDistributedCache`2">
            <summary>
            Represents a distributed cache of <typeparamref name="TCacheItem" /> type.
            Uses a generic cache key type of <typeparamref name="TCacheKey" /> type.
            </summary>
            <typeparam name="TCacheItem">The type of cache item being cached.</typeparam>
            <typeparam name="TCacheKey">The type of cache key being used.</typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.Get(`1)">
            <summary>
            Gets a cache item with the given key. If no cache item is found for the given key then returns null.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <returns>The cache item, or null.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.GetMany(System.Collections.Generic.IEnumerable{`1})">
             <summary>
             Gets multiple cache items with the given keys.
            
             The returned list contains exactly the same count of items specified in the given keys.
             An item in the return list can not be null, but an item in the list has null value
             if the related key not found in the cache.
             </summary>
             <param name="keys">The keys of cached items to be retrieved from the cache.</param>
             <returns>List of cache items.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.GetOrAdd(`1,System.Func{`0},System.Func{JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions})">
            <summary>
            Gets or Adds a cache item with the given key. If no cache item is found for the given key then adds a cache item
            provided by <paramref name="factory" /> delegate and returns the provided cache item.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache item when no cache item is found for the given <paramref name="key" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.Set(`1,`0,JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions)">
            <summary>
            Sets the cache item value for the provided key.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="value">The cache item value to set in the cache.</param>
            <param name="options">The cache options for the value.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.SetMany(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`1,`0}},JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions)">
            <summary>
            Sets multiple cache items.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="items">Items to set on the cache</param>
            <param name="options">The cache options for the value.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.Refresh(`1)">
            <summary>
            Refreshes the cache value of the given key, and resets its sliding expiration timeout.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.RefreshMany(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Refreshes the cache value of the given keys, and resets their sliding expiration timeout.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.Remove(`1)">
            <summary>
            Removes the cache item for given key from cache.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.RemoveMany(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes the cache items for given keys from cache.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.RemoveManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Removes the cache items for given keys from cache.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.GetManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
             <summary>
             Gets multiple cache items with the given keys.
            
             The returned list contains exactly the same count of items specified in the given keys.
             An item in the return list can not be null, but an item in the list has null value
             if the related key not found in the cache.
            
             </summary>
             <param name="keys">The keys of cached items to be retrieved from the cache.</param>
             /// <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
             <returns>List of cache items.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.RemoveAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Removes the cache item for given key from cache.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.RefreshManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache value of the given keys, and resets their sliding expiration timeout.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="keys">The keys of cached items to be retrieved from the cache.</param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.RefreshAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache value of the given key, and resets its sliding expiration timeout.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.SetManyAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`1,`0}},JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets multiple cache items.
            Based on the implementation, this can be more efficient than setting multiple items individually.
            </summary>
            <param name="items">Items to set on the cache</param>
            <param name="options">The cache options for the value.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.GetAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Gets a cache item with the given key. If no cache item is found for the given key then returns null.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The cache item, or null.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.SetAsync(`1,`0,JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the cache item value for the provided key.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="value">The cache item value to set in the cache.</param>
            <param name="options">The cache options for the value.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> indicating that the operation is asynchronous.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.IDistributedCache`2.GetOrAddAsync(`1,System.Func{System.Threading.Tasks.Task{`0}},System.Func{JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Gets or Adds a cache item with the given key. If no cache item is found for the given key then adds a cache item
            provided by <paramref name="factory" /> delegate and returns the provided cache item.
            </summary>
            <param name="key">The key of cached item to be retrieved from the cache.</param>
            <param name="factory">The factory delegate is used to provide the cache item when no cache item is found for the given <paramref name="key" />.</param>
            <param name="optionsFactory">The cache options for the factory delegate.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> for the task.</param>
            <returns>The cache item.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Caching.MemoryCache">
            <summary>
            MemoryCache
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.#ctor">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Caching.MemoryCache.Count">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Dispose">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Set(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Set(System.String,System.Object,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.GetMany(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.GetOrAdd(System.String,System.Func{System.Object},System.Func{JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Set(System.String,System.Object,JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.SetMany(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Refresh(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.RefreshMany(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.RemoveMany(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.RemoveManyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.RefreshManyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.SetManyAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.GetManyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.GetAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.GetOrAddAsync(System.String,System.Func{System.Threading.Tasks.Task{System.Object}},System.Func{JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.SetAsync(System.String,System.Object,JinianNet.JNTemplate.Caching.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.RefreshAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.CharScanner">
            <summary>
            The char scanner.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.CharScanner"/> class
            </summary>
            <param name="text">The contents.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.CharScanner.Index">
            <summary>
            The zero-based index in the <see cref="T:JinianNet.JNTemplate.CharScanner"/> at which scanned.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Next">
            <summary>
            Forward
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Next(System.Int32)">
            <summary>
            Forward specified character
            </summary>
            <param name="i">Forward number</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Back">
            <summary>
            Back
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Back(System.Int32)">
            <summary>
            Back specified character.
            </summary>
            <param name="i">Back number.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Read">
            <summary>
            Reads the characters from the current string.
            </summary>
            <returns>A char. </returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Read(System.Int32)">
            <summary>
            Reads the characters from the current string.
            </summary>
            <param name="i">The start index.</param>
            <returns>A char. </returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.IsMatch(System.Char[])">
            <summary>
            Indicates whether finds a match in a specified input chars.
            </summary>
            <param name="list">The chars to search for a match.</param> 
            <returns>true if the chars finds a match; otherwise, false.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.IsEnd">
            <summary>
            Indicates whether is end.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.IsMatch(System.Char[],System.Int32)">
            <summary>
            Indicates whether finds a match in a specified input chars.
            </summary>
            <param name="list">The chars to search for a match.</param>
            <param name="n">The start index.</param>
            <returns>true if the chars finds a match; otherwise, false.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetEscapeString">
            <summary>
            Retrieves a substring from this instance.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetString">
            <summary>
            Retrieves a substring from this instance.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetEscapeString(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. 
            </summary>
            <param name="x">The zero-based starting character position of a substring in this instance.</param>
            <param name="y">The zero-based ended character position of a substring in this instance.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetString(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.
            </summary>
            <param name="x">The zero-based starting character position of a substring in this instance.</param>
            <param name="y">The zero-based ended character position of a substring in this instance.</param>
            <returns>A string.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.CompileBuilder">
            <summary>
            The compilation method builder 
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileBuilder"/> class
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileBuilder.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.MethodInfo})">
            <summary>
            Register a rendering method.
            </summary>
            <typeparam name="T">Type type of the tag.</typeparam>
            <param name="func">The method.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileBuilder.Register(System.String,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.MethodInfo})">
            <summary>
            Register a rendering method.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="func">The method.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileBuilder.Build(System.String)">
            <summary>
            Build a method with has return value
            </summary>
            <param name="name">The name of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileBuilder.Build(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Build a method with has return value
            </summary>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileBuilder.Build``1">
            <summary>
            Build a method with has return value
            </summary>
            <typeparam name="T">Type type of the tag.</typeparam>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileBuilder.Clear">
            <summary>
            Removes all elements from <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileBuilder"/>
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.CompileContext">
            <summary>
            The compilation context .
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContext.#ctor(JinianNet.JNTemplate.Hosting.IHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/> class
            </summary>
            <param name="hostEnvironment"></param> 
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.Name">
            <summary>
            Unique key of the template
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.TypeBuilder">
            <summary>
             Gets or sets the <see cref="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.TypeBuilder"/> of the context.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.Generator">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.Emit.ILGenerator"/> of the context.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.Data">
            <summary>
            Gets or sets the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> of the context.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.Methods">
            <summary>
            Used to cache some compiled methods . 
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.CompileBuilder">
            <summary>
            Gets the <see cref="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.CompileBuilder"/>
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.TypeGuesser">
            <summary>
            Gets the <see cref="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.CompileBuilder"/>
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContext.Set(System.String,System.Type)">
            <summary>
            Set the type of compilation parameters 
            </summary>
            <param name="name">Unique key of the variable.</param>
            <param name="type">The type of the variable.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContext.Set``1(System.String)">
            <summary>
            Set the type of compilation parameters 
            </summary>
            <typeparam name="T">The type of the tag.</typeparam>
            <param name="name">Unique key of the variable.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContext.Dispose">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileContext.Seed">
            <summary>
            The seed  of the increase .
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.CreateRenderMethod``1(JinianNet.JNTemplate.CodeCompilation.CompileContext)">
            <summary>
            Adds a new method to the type, with the specified name.
            </summary>
            <typeparam name="T">The type of the tag.</typeparam>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.CreateRenderMethod(JinianNet.JNTemplate.CodeCompilation.CompileContext,System.String)">
            <summary>
            Adds a new render method to the type, with the specified name.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns>The <see cref="T:System.Reflection.Emit.MethodBuilder"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.CreateReutrnMethod``1(JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type)">
            <summary>
            Adds a new method with has return to the type, with the specified name.
            </summary>
            <typeparam name="T">The type of the tag.</typeparam>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <param name="returnType">The return type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.CreateReutrnMethod(JinianNet.JNTemplate.CodeCompilation.CompileContext,System.String,System.Type)">
            <summary>
            Adds a new method with has return to the type, with the specified name.
            </summary> 
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <param name="methodName"></param>
            <param name="returnType">The return type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.CreateReutrnMethod(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Adds a new method to the type, with the specified name.
            </summary> 
            <param name="builder">The <see cref="T:System.Reflection.Emit.TypeBuilder"/>.</param>
            <param name="name">The name of the method.</param>
            <param name="returnType">The return type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.GuessType(JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Gets the <see cref="T:System.Type"/> with the specified tag.
            </summary>
            <param name="tag">The tag of the type to get.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.CompileTag(JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Compiles the specified tag into a method.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.BlockCompile(JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.Emit.ILGenerator,JinianNet.JNTemplate.Nodes.ITag[])">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="ctx"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.IfCompile``1(JinianNet.JNTemplate.CodeCompilation.CompileContext,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.GuessIfType(JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ElseifTag)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.Compile(JinianNet.JNTemplate.CodeCompilation.CompileContext,System.String)">
            <summary>
            Compile the text into a dynamic class.
            </summary>
            <param name="content">the context of the text</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.Compile(JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ITag[])">
            <summary>
            Compile the array into a dynamic class.
            </summary>
            <param name="tags">The array of the tag.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.Compile(JinianNet.JNTemplate.CodeCompilation.CompileContext,System.String,JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Compiles the specified tag into a method.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompileContextExtensions.Compile(JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Compiles the specified tag into a method.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.CompileParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileParameter.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileParameter.ILGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileParameter.ReturnType">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.CompileParameter.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.CompilerResult">
            <summary>
            Represents the results of compilation that are returned from a compiler. 
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompilerResult.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompilerResult.RenderResult(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="context"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompilerResult.ThrowException(JinianNet.JNTemplate.TemplateContext,System.Exception,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="exception"></param>
            <param name="line"></param>
            <param name="col"></param>
            <param name="source"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompilerResult.RenderAsync(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.CompilerResult.GetRenderTask(JinianNet.JNTemplate.TemplateContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate">
            <summary>
            Returns a blank template.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.VariableElement"/> class
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.VariableElement"/> class
            </summary>
            <param name="message">The output message.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.EnableCompile">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.Dispose">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.Render(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.RenderAsync(System.IO.TextWriter,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.EmptyCompileTemplate.RenderAsync(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.ICompilerResult">
            <summary>
            Represents the results of compilation that are returned from a compiler. 
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.ICompileTemplate">
            <summary>
            Compile Template
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.ObjectTo(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts an object to a specified type.
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="type">The target type.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Calls the method.
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="type">Method belongs to the object type.</param>
            <param name="method">The method being called.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.Ldelem(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Loading Array Elements
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="type">The type of the element.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.CallTypeTag(System.Reflection.Emit.ILGenerator,JinianNet.JNTemplate.Nodes.ITypeTag)">
            <summary>
            calling the type tag.
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITypeTag"/></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.CallTag(System.Reflection.Emit.ILGenerator,JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ITag,System.Action{System.Reflection.Emit.ILGenerator,System.Boolean,System.Boolean},System.Action{System.Reflection.Emit.ILGenerator,System.Type})">
            <summary>
            calling the tag.
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/></param>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/></param>
            <param name="before">The action.</param>
            <param name="completed">The action of the completed.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.LoadVariable(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            Load the variables
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="type">The variable type.</param>
            <param name="index"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.EmitEquals(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Equals
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="type">The type.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.StringAppend(System.Reflection.Emit.ILGenerator,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.ITag},System.Int32,System.Int32)">
            <summary>
            Appends the string representation of a specified object to <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/></param>
            <param name="tags">The <see cref="T:System.Collections.Generic.IList`1"/></param>
            <param name="stringBuildIndex">The index on which <see cref="T:System.Text.StringBuilder"/> resides.</param>
            <param name="contextIndex">The index on which <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/> resides.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.StringAppend(System.Reflection.Emit.ILGenerator,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type)">
            <summary>
            Appends the string representation of a specified object to <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="il">The <see cref="T:System.Reflection.Emit.ILGenerator"/></param>
            <param name="c">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/></param>
            <param name="returnType"></param>\
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.ConvertTo(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.ILGeneratorExtensions.ObviousConvertTo(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.ITagCompileResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.ITagCompileResult.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.ITagCompileResult.IsMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.ITagCompileResult.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.ITagCompileResult.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.LocalVar">
            <summary>
            The local variable.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.LocalVar.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.CodeCompilation.LocalVar"/> class
            </summary>
            <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.LocalVar.Declare(System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="type"> A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.LocalVar.Declare(System.String,System.Type)">
            <summary>
            Declares a local variable of the specified type.
            </summary>
            <param name="varName">The name of the variable.</param>
            <param name="type"> A <see cref="T:System.Type"/> object that represents the type of the local variable.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.LocalVar.CanDeclare(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.LocalVar.Item(System.String)">
            <summary>
            Gets the zero-based index of the local variable within the method body.
            </summary>
            <param name="varName">The name of the variable.</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1.#ctor(`0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="isMethod"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1.Result">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1.IsMethod">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1.JinianNet#JNTemplate#CodeCompilation#ITagCompileResult#Result">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1.Tag">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.CodeCompilation.TagCompileResult`1.Type">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.CodeCompilation.TypeGuesser">
            <summary>
            Type Guess
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.CodeCompilation.TypeGuesser"/> class.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type})">
            <summary>
            Register a guess mehtod for the tag.
            </summary>
            <typeparam name="T">The type of tag.</typeparam>
            <param name="func">The guess method.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.Register(System.String,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type})">
            <summary>
            Register a guess mehtod for the tag.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="func">The guess method.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.GetType(JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext)">
            <summary>
            Gets the <see cref="T:System.Type"/> with the specified tag.
            </summary>
            <param name="tag">The tag of the type to get.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.GetType(System.String,JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext)">
            <summary>
            Gets the <see cref="T:System.Type"/> with the specified tag.
            </summary>
            <param name="name">The tag name of the type to get.</param>
            <param name="tag">The tag of the type to get.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/>.</param>
            <returns>The type with the specified tag, if found; otherwise, null.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.InferChildType(System.Type)">
            <summary>
            Gets the child <see cref="T:System.Type"/> with the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Thpe <see cref="T:System.Type"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.GetTypeLevel(System.Type)">
            <summary>
            Get priority
            </summary>
            <param name="type">TYPE</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.IsMinZero(System.Type)">
            <summary>
            Whether the type is unsigned
            </summary>
            <param name="type">TYPE</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.ChangeType(System.Type)">
            <summary>
            The unsigned type is converted to the corresponding signed type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.ChoiceType(System.Type,System.Type)">
            <summary>
            Choose the best type
            </summary>
            <param name="x">The first type.</param>
            <param name="y">The second type.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.FindBestType(System.Type[])">
            <summary>
            Find the type that matches best.
            </summary>
            <param name="types">type array</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.IsPrimitive(System.Type)">
            <summary>
            Gets a value indicating whether the  <see cref="T:System.Type"/> is one of the primitive types.
            </summary>
            <param name="type">The type.</param>
            <returns>true if the <see cref="T:System.Type"/> is one of the primitive types; otherwise, false.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.CanUseEqual(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.IsNumber(System.Type)">
            <summary>
            Indicates whether the specified type is categorized as a number.
            </summary>
            <param name="type">The type.</param>
            <returns>true if the <see cref="T:System.Type"/> is one of the number types; otherwise, false.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CodeCompilation.TypeGuesser.Clear">
            <summary>
            Removes all elements from <see cref="T:JinianNet.JNTemplate.CodeCompilation.TypeGuesser"/>
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.ConfigExtensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.ConfigExtensions.ToDictionary(JinianNet.JNTemplate.Configuration.IConfig)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:JinianNet.JNTemplate.Configuration.IConfig"/>.
            </summary>
            <param name="config">config</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.EngineConfig">
            <summary>
            The default config of the engine.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.EngineConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Configuration.EngineConfig"/> class
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.EngineConfig.CreateDefault">
            <summary>
            Created the default config.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.DisableeLogogram">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TagPrefix">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TagSuffix">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TagFlag">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.GlobalData">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.Encoding">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.ResourceDirectories">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.EnableCompile">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.EnableTemplateCache">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.ThrowExceptions">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TypeDetectPattern">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.OutMode">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.IConfig">
            <summary>
            The config of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.DisableeLogogram">
            <summary>
            Gets or sets whether disablee logogram .
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TagPrefix">
            <summary>
            Gets or sets the tag prefix .
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TagSuffix">
            <summary>
            Gets or sets the tag suffix.
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TagFlag">
            <summary>
            Gets or sets the tag flag.
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.Encoding">
            <summary>
            Gets or sets the <see cref="P:JinianNet.JNTemplate.Configuration.IConfig.Encoding"/> of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.ResourceDirectories">
            <summary>
            Gets or sets the global resource directories of the engine.
            </summary>
            <value></value>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.EnableCompile">
            <summary>
            Enable or disenable the compile mode.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.EnableTemplateCache">
            <summary>
            Enable or disenable the cache.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.ThrowExceptions">
            <summary>
            Gets or sets whether throw exceptions.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TypeDetectPattern">
            <summary>
            Gets or sets the detect patterns.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.OutMode">
            <summary>
            Gets or sets the output mode.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.GlobalData">
            <summary>
            Gets or sets the global data of the engine.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.PropertyAttribute">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.PropertyAttribute.Name">
            <summary>
            对应名称
            </summary>
            <value></value>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.PropertyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.PropertyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.VariableAttribute">
            <summary>
            环境变量配置属性
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.VariableAttribute.Name">
            <summary>
            对应名称
            </summary>
            <value></value>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.VariableAttribute.Type">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.VariableAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.VariableAttribute.#ctor(System.String,JinianNet.JNTemplate.Configuration.VariableType)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="type">类型</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.VariableType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Configuration.VariableType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Configuration.VariableType.Environment">
            <summary>
            环境变量（会保存在引擎环境变量中，随时读取）
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Configuration.VariableType.System">
            <summary>
            系统变量（系统特殊属性，需要用户在代码中自行进行处理）
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Const">
            <summary>
            System fields.
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Const.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Context">
            <summary>
            Base class with Context.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Context.#ctor(JinianNet.JNTemplate.Hosting.IHostEnvironment)">
            <summary>
            
            </summary>
            <param name="hostEnvironment"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.OutMode">
            <summary>
            Gets or sets the render mode.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.CurrentPath">
            <summary>
            Gets or sets the current path.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.Charset">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.ThrowExceptions">
            <summary>
            Gets or sets the exception handling.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.Environment">
            <summary>
             Gets or sets the cache of the environment.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.Cache">
            <summary>
            Gets the cache of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.EnableCache">
            <summary>
            Enable or Disenable the cache.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.Debug">
            <summary>
            Gets or sets the debug mode.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.DefaultScopeProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.DefaultScopeProvider.CreateScope">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ExecutorBuilder">
            <summary>
            The Execute the method builder
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecutorBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Dynamic.ExecutorBuilder"/> class
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecutorBuilder.Build(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Build a rendering method for the specified tag.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecutorBuilder.Build``1">
            <summary>
            Build a rendering method for the specified tag.
            </summary>
            <typeparam name="T">The type of the <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</typeparam>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecutorBuilder.Build(System.String)">
            <summary>
            Build a rendering method for the specified tag.
            </summary>
            <param name="name">The name of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecutorBuilder.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <summary>
            Register a execute method for the specified tag.
            </summary>
            <typeparam name="T">The type of the tag.</typeparam>
            <param name="func">The method.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecutorBuilder.Register(System.String,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <summary>
            Register a execute method for the specified tag.
            </summary>
            <param name="name">The tag name.</param>
            <param name="func">The method.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecutorBuilder.Clear">
            <summary>
            Removes all items from the <see cref="T:JinianNet.JNTemplate.Dynamic.ExecutorBuilder"/>.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator">
            <summary>
            Expression calculation
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType">
            <summary>
            LetterType
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.LeftParentheses">
            <summary>
            (
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.RightParentheses">
            <summary>
            ]
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.Number">
            <summary>
            number
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.Other">
            <summary>
            other
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.ProcessExpression(System.String)">
            <summary>
            process expression.
            </summary>
            <param name="value">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.ProcessExpression(System.Object[])">
            <summary>
            process expression.
            </summary>
            <param name="value">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.GetType(System.Object)">
            <summary>
            Gets the type of the specified object.
            </summary>
            <param name="value">The object.</param>
            <returns>A type.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Object,System.Object,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The result of expression.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Collections.Generic.Stack{System.Object})">
            <summary>
            Evaluating reverse polish notation
            </summary>
            <param name="value">The reverse polish notation.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Object[])">
            <summary>
            Computational mathematical expression.
            </summary>
            <param name="value">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.String)">
            <summary>
            Computational mathematical expression.
            </summary>
            <param name="value">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Boolean,System.Boolean,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.String,System.String,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.DateTime,System.DateTime,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Double,System.Double,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Single,System.Single,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Decimal,System.Decimal,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Int32,System.Int32,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Int64,System.Int64,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Int16,System.Int16,System.String)">
            <summary>
            Calculates the value of objects
            </summary>
            <param name="x">The first value. </param>
            <param name="y">The second value.</param>
            <param name="value">The operator.</param> 
            <returns>The result of expression.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ObjectBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.FromAnonymousObject(System.Object,System.Type)">
            <summary>
            Copies all properties of an object
            </summary>
            <param name="target">type</param>
            <param name="value">ori object</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.GenerateCopyMethod(System.String,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="original"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.ImplementationProperty(System.Type,System.Reflection.Emit.TypeBuilder,System.String)">
            <summary>
            Adds a new property to the type, with the given name, attributes, calling convention, and property signature.
            </summary>
            <param name="type">The return type of the property.</param>
            <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder"/>.</param>
            <param name="name">The name of the property. name cannot contain embedded nulls.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.GetOrGenerateType(System.Type)">
            <summary>
            define object
            </summary>
            <param name="baseType">base type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.GenerateTypeFrom(System.Type)">
            <summary>
            define object
            </summary>
            <param name="baseType">base type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.DefineType(System.String)">
            <summary>
            Constructs a TypeBuilder for a private type with the specified name in this module.
            </summary>
            <param name="assemblyName">The display name of the assembly.</param> 
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.DefineType(System.Type,System.Type,System.String)">
            <summary>
            Constructs a TypeBuilder for a private type with the specified name in this module.
            </summary>
            <param name="interfaceType">The interface that this type implements.</param>
            <param name="parent">The type that the defined type extends.</param>
            <param name="assemblyName">The display name of the assembly.</param> 
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.DefineType(System.Type,System.Type,System.String,System.String)">
            <summary>
            Constructs a TypeBuilder for a private type with the specified name in this module.
            </summary>
            <param name="interfaceType">The interface that this type implements.</param>
            <param name="parent">The type that the defined type extends.</param>
            <param name="assemblyName">The display name of the assembly.</param>
            <param name="moduleName">The name of the dynamic module.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.DefineType(System.Reflection.Emit.AssemblyBuilder,System.Type,System.Type,System.String,System.String,System.String)">
            <summary>
            Constructs a TypeBuilder for a private type with the specified name in this module.
            </summary>
            <param name="interfaceType">The interface that this type implements.</param>
            <param name="parent">The type that the defined type extends.</param>
            <param name="assemblyName">The display name of the assembly.</param>
            <param name="moduleName">The name of the dynamic module.</param>
            <param name="fileName">The name of the file to which the dynamic module should be saved.</param>
            <param name="assemblyBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.BuildType(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Gets a type object that represents this type.
            </summary>
            <param name="builder"></param>
            <returns>An object that represents this type.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.GenerateType(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.GenerateSetMethod(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ObjectBuilder.GenerateToListMethod(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.OperatorConvert">
             <summary>
            The operator convert class.
             </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.OperatorConvert.ToString(JinianNet.JNTemplate.Operator)">
            <summary>
            Converts the pperator to its equivalent string representation.
            </summary>
            <param name="value">The operator.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.OperatorConvert.Parse(System.String)">
            <summary>
            Converts the string representation of a operator.
            </summary>
            <param name="value">A string containing a operator to convert.</param>
            <returns>A operator.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ReflectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Searches for the public property with the specified name.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The string containing the name of the public property to get.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetPropertyGetMethod(System.Type,System.String)">
            <summary>
            Returns the public get accessor for specified property.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The string containing the name of the public property to get.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetPropertyGetMethod(System.Reflection.PropertyInfo)">
            <summary>
            Returns the public get accessor for specified property.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetPropertySetMethod(System.Type,System.String)">
            <summary>
            Returns the public get accessor for specified property.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The string containing the name of the public property to set.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetPropertySetMethod(System.Reflection.PropertyInfo)">
            <summary>
            Returns the public get accessor for specified property.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetFieldInfo(System.Type,System.String)">
            <summary>
            Searches for the public field with the specified name.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetCacheMethods(System.Type,System.String)">
            <summary>
            Returns all the public members of the specified name.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetMethodInfos(System.Type,System.String)">
             <summary>
            Returns all the public members of the specified name.
             </summary>
             <param name="type">The type of object.</param>
             <param name="name">The string containing the name of the method to get.</param>
             <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetExplicitOrImplicit(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetMethodInfo(System.Type,System.String,System.Type[],System.Boolean)">
            <summary>
            Searches for the public or private method with the specified name.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="args">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <param name="isStrict">Whether the parameter types are identical.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetMethodInfo(System.Type,System.String,System.Type[])">
            <summary>
            Searches for the public or private method with the specified name.
            </summary>
            <param name="type">The type of object.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="args">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetGenericMethod(System.Type,System.Type[],System.String,System.Type[])">
            <summary>
            Searches for the public or private generic method with the specified name.
            </summary>
            <param name="type">The type of object.</param>
            <param name="genericType">The generic types of method.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="args">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.IsMatch(System.Reflection.ParameterInfo[],System.Type[],System.Boolean)">
            <summary>
            Whether the parameter types are identical
            </summary>
            <param name="pi">The parameter array.</param>
            <param name="args">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <param name="isAllMatch"></param>
            <returns>bool</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.IsMatch(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Whether the parameter types are identical
            </summary>
            <param name="pi">The parameter array.</param>
            <param name="args">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <returns>bool</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.IsMatchType(System.Type,System.Type)">
            <summary>
            Indicates whether finds a match in a specified input type.
            </summary>
            <param name="original">The original tag.</param>
            <param name="target">The target tag.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CanChange(System.Type,System.Type)">
            <summary>
            Whether the original type can be converted to the target type
            </summary>
            <param name="original">The original type.</param>
            <param name="target">The target type.</param>
            <returns>bool</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.DefaultForType(System.Type)">
            <summary>
            Gets the default value for the specified type.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.ChangeParameters(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Reflection.ParameterInfo[])">
            <summary>
            Convert dictionary to matching parameters
            </summary>
            <param name="data">The dictionary. </param>
            <param name="pis">The parameter types.</param>
            <returns>object[]</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CreateInstance``1(System.String)">
            <summary>
            Creates an instance of the type whose name is specified. 
            </summary>
            <typeparam name="T">The result of type.</typeparam>
            <param name="typeName">Thpe type name.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CreateInstance``1(System.Type)">
            <summary>
            Creates an instance of the specified type. 
            </summary>
            <typeparam name="T">The result of type.</typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the specified type. 
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CallPropertyOrField(System.Object,System.String,System.Type)">
            <summary>
            Gets the property or field value of the object.
            </summary>
            <param name="container">The object.</param>
            <param name="type">The type of the object.</param>
            <param name="name">The property or field name. </param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Calls the specified method and returns the result of execution
            </summary>
            <param name="container">Then Instance objects.</param>
            <param name="name">The name of the method.</param>
            <param name="args">The parameter of the method.</param>
            <returns>The result of execution.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CallMethod(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Calls the specified method and returns the result of execution
            </summary>
            <param name="type">Then Instance objects.</param>
            <param name="container">Then Instance objects.</param>
            <param name="name">The name of the method.</param>
            <param name="args">The parameter of the method.</param>
            <returns>The result of execution.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CallIndexValue(System.Object,System.Object)">
            <summary>
            Get the index value.
            </summary>
            <param name="container">The object.</param>
            <param name="propIndex"> The zero-based index in the object. </param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.GetIEnumerableGenericType(System.Type)">
            <summary>
            Searches for the enumerable with the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.IsIEnumerableGeneric(System.Type)">
            <summary>
             Gets a value indicating whether the <see cref="T:System.Type"/> is enumerable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CallGenericMethod(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="genericType"></param>
            <param name="container"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.CallGenericMethod(System.Type,System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="genericType"></param>
            <param name="container"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.Call(System.Type,System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="container"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionExtensions.ToIEnumerable(System.Object)">
            <summary>
             Returns an enumerable that iterates through the object.
            </summary>
            <param name="dataSource"></param>
            <returns>A <see cref="T:System.Collections.IEnumerable"/> for the object.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Engine">
            <summary>
            The template engine
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Engine.Current">
            <summary>
            Gets or sets the engine instance.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Engine.Version">
            <summary>
            The engine version.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Engine.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Configure(System.Action{JinianNet.JNTemplate.Runtime.IOptions})">
            <summary>
            Configuration engine which <see cref="T:System.Action`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Configure(JinianNet.JNTemplate.Configuration.IConfig)">
            <summary>
            Configuration engine which <see cref="T:JinianNet.JNTemplate.Runtime.IOptions"/>.
            </summary>
            <param name="option">The <see cref="T:JinianNet.JNTemplate.Runtime.IOptions"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CompileFile(System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <summary>
            Compile a template with a given file
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="path">The fully qualified path of the file to load.</param>
            <param name="action">The <see cref="T:System.Action`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Compile(System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <summary>
            Compile a template with a given contents
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="content">The template contents.</param>
            <param name="action">The <see cref="T:System.Action`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CompileFile(System.IO.FileInfo[],System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <summary>
            Compile a template with a given files
            </summary> 
            <param name="fs">The files.</param>
            <param name="action">The <see cref="T:System.Action`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CreateTemplate(System.String)">
            <summary>
            Creates template with specified text.
            </summary>
            <param name="text">The template contents.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CreateTemplate(System.String,System.String)">
            <summary>
            Creates template with specified text.
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="text">The template contents.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.LoadTemplate(System.String)">
            <summary>
            Loads the template on the specified path.
            </summary>
            <param name="path">The fully qualified path of the file to load.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.LoadTemplate(System.String,System.String)">
            <summary>
            Loads the template on the specified path.
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="path">The fully qualified path of the file to load.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CreateContext">
            <summary>
            Creates template context.
            </summary>
            <returns>An instance of a <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Parse``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text"></param>
            <param name="data"></param>
            <returns></returns>
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Parse``1(System.IO.FileInfo,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Register``1(System.Func{JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.Nodes.ITag},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.MethodInfo},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type},System.Int32)">
            <summary>
            Register an new tag.
            </summary>
            <typeparam name="T">Type of the new tag. </typeparam>
            <param name="parseMethod">parser of the new tag.</param>
            <param name="compileMethod">compile method of the new tag.</param>
            <param name="guessMethod">guess method of the new tag.</param>
            <param name="index">The zero-based index.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.UseCompileEngine">
            <summary>
            Enable compilation mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.UseInterpretationEngine">
            <summary>
            Enable compilation mode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.EngineBuilder">
            <summary>
             
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.EngineBuilder.Build">
            <summary>
            Build a engine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.EngineBuilder.UseCompileEngine">
            <summary>
            Enable compilation mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.EngineBuilder.UseInterpretationEngine">
            <summary>
            Disable compilation mode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.EngineMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.EngineMode.Interpreted">
            <summary>
            Interpreted
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.EngineMode.Compiled">
            <summary>
            Compiled
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Exceptions.CompileException">
            <summary>
            Represents errors that occur during application execution.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.CompileException.#ctor(JinianNet.JNTemplate.Nodes.ITag,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.CompileException"/> class.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.CompileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.CompileException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.CompileException.#ctor(JinianNet.JNTemplate.Nodes.ITag,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.CompileException"/> class.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Exceptions.ParseException">
            <summary>
            Represents errors that occur during application execution.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.ParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.ParseException"/> class.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.ParseException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.ParseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="line">The line on error.</param>
            <param name="column">The column on error.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.ParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.ParseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.ParseException.#ctor(JinianNet.JNTemplate.Nodes.ITag,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.ParseException"/> class.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Exceptions.RuntimeException">
            <summary>
            Represents errors that occur during application execution.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.RuntimeException.#ctor(JinianNet.JNTemplate.Nodes.ITag,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.CompileException"/> class.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.CompileException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Exceptions.TemplateException">
            <summary>
            Represents errors that occur during application execution.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Exceptions.TemplateException.Line">
            <summary>
            The line of the exception.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Exceptions.TemplateException.Column">
            <summary>
            The column of the exception.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Exceptions.TemplateException.Code">
            <summary>
            The error code of the exception.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.TemplateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.TemplateException"/> class.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.TemplateException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.TemplateException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="line">The line on error.</param>
            <param name="column">The column on error.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.TemplateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.TemplateException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.TemplateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.TemplateException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exceptions.TemplateException.#ctor(JinianNet.JNTemplate.Nodes.ITag,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Exceptions.TemplateException"/> class.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Executor">
            <summary>
            Executor
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Executor`1">
            <summary>
            Represents an executor.
            </summary>
            <typeparam name="T">The type of return object.</typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.Executor`1.Execute">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Executor`1.JinianNet#JNTemplate#IExecutor#Execute">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Executor`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Executor`1.JinianNet#JNTemplate#IExecutor#ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.FlagMode">
            <summary>
            Tag flag.
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.None">
            <summary>
            default
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.Logogram">
            <summary>
            Logogram Tag: $text
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.Full">
            <summary>
            Full Tag:${text}
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.Comment">
            <summary>
            Comment tag:$* text *$
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.FuncHandler">
            <summary>
            Encapsulates a method that returns a value.
            </summary>
            <param name="args">The parameters.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.#ctor(JinianNet.JNTemplate.Runtime.IOptions,JinianNet.JNTemplate.Parsers.TagParser,JinianNet.JNTemplate.CodeCompilation.CompileBuilder,JinianNet.JNTemplate.CodeCompilation.TypeGuesser,JinianNet.JNTemplate.Dynamic.ExecutorBuilder,JinianNet.JNTemplate.IScopeProvider,JinianNet.JNTemplate.Caching.ICache,JinianNet.JNTemplate.Resources.IResourceLoader)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="parser"></param>
            <param name="compileBuilder"></param>
            <param name="typeGuesser"></param>
            <param name="executorBuilder"></param>
            <param name="scopeProvider"></param>
            <param name="cache"></param>
            <param name="resourceLoader"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.RootPath">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.EnvironmentName">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Results">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Parser">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Builder">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Guesser">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.ExecutorBuilder">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.ScopeProvider">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Cache">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Data">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Loader">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.EnvironmentVariable">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.DefaultHostEnvironment.Options">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions.GenerateContext(JinianNet.JNTemplate.Hosting.IHostEnvironment,System.String)">
            <summary>
            Generate Context
            </summary>
            <param name="name">template name</param>
            <param name="environment"> </param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions.GenerateContext(JinianNet.JNTemplate.Hosting.IHostEnvironment,System.String,JinianNet.JNTemplate.IVariableScope)">
            <summary>
            Create a compilation context.
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="scope">The template data.</param>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions.CompileFile(JinianNet.JNTemplate.Hosting.IHostEnvironment,System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <summary>
            Compile the text into a dynamic class.
            </summary>
            <param name="path"></param>
            <param name="name">Unique key of the template</param>
            <param name="action">The parameter setting method.</param>
            <param name="environment">The options of the engine.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions.CreateVariableScope(JinianNet.JNTemplate.Hosting.IHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> class
            </summary>
            <param name="environment">The <see cref="T:JinianNet.JNTemplate.Hosting.IHostEnvironment"/></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions.CreateVariableScope(JinianNet.JNTemplate.Hosting.IHostEnvironment,JinianNet.JNTemplate.IVariableScope)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> class
            </summary>
            <param name="environment">The <see cref="T:JinianNet.JNTemplate.Hosting.IHostEnvironment"/></param>
            <param name="parent">The <see cref="T:JinianNet.JNTemplate.IVariableScope"/></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions.Compile(JinianNet.JNTemplate.Hosting.IHostEnvironment,System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <summary>
            Compile the text into a dynamic class.
            </summary>
            <param name="content">the context of the text</param>
            <param name="name">Unique key of the template</param>
            <param name="action">The parameter setting method.</param>
            <param name="environment">The options of the engine.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.HostEnvironmentExtensions.CreateContext(JinianNet.JNTemplate.Hosting.IHostEnvironment)">
            <summary>
            Creates template context.
            </summary>
            <returns>An instance of a <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Hosting.IHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHost.HostEnvironment">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.IHost.RegisterParseFunc(System.Func{JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.Nodes.ITag},System.Int32)">
            <summary>
            Register an new parsing method.
            </summary>
            <param name="func">parser of the new tag.</param>
            <param name="index">The zero-based index.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.IHost.RegisterCompileFunc``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.MethodInfo})">
            <summary>
            Register an new compile method.
            </summary>
            <typeparam name="T">Type of the new tag. </typeparam> 
            <param name="func">compile method of the new tag.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.IHost.RegisterGuessFunc``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type})">
            <summary>
            Register an new guess method.
            </summary>
            <typeparam name="T">Type of the new tag. </typeparam> 
            <param name="func">guess method of the new tag.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.IHost.RegisterExecuteFunc``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <summary>
            Register an new excute method.
            </summary>
            <typeparam name="T">Type of the new tag. </typeparam> 
            <param name="func">excute method of the new tag.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.IHost.Reset">
            <summary>
            /
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.IHost.GetEnvironmentVariable(System.String)">
            <summary>
            Gets an value from environment variables.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Hosting.IHost.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            Sets an value from environment variables.
            </summary>
            <param name="key">The key of the value to set.</param>
            <param name="value">The variable to add to.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Hosting.IHostEnvironment">
            <summary>
            Provides information about the hosting environment an application is running in.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.Options">
            <summary>
            Gets or sets the options of the host environment.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.ApplicationName">
            <summary>
            Gets or sets the name of the application. 
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.RootPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.EnvironmentName">
            <summary>
            Gets or sets the name of the environment. The host automatically sets this property to the value of the of the "environment" key as specified in configuration.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.Results">
            <summary>
            Gets or sets the compiler result collection.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.Parser">
            <summary>
            Gets or sets the tag parser of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.Builder">
            <summary>
            Gets or sets the tag <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileBuilder"/> of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.Guesser">
            <summary>
            Gets or sets the tag <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileBuilder"/> of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.ExecutorBuilder">
            <summary>
            Gets or sets the tag <see cref="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.ExecutorBuilder"/> of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.ScopeProvider">
            <summary>
            Gets or sets the <see cref="T:JinianNet.JNTemplate.IScopeProvider"/> of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.Cache">
            <summary>
            Gets or sets the cache of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.Loader">
            <summary>
            Gets or sets the <see cref="T:JinianNet.JNTemplate.Resources.IResourceLoader"/> of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Hosting.IHostEnvironment.EnvironmentVariable">
            <summary>
            Gets or sets the environment variable of the engine.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.IEngine">
            <summary>
            The template engine
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.IEngine.Mode">
            <summary>
            Enable or disenable the compile mode.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Configure(System.Action{JinianNet.JNTemplate.Runtime.IOptions})">
            <summary>
            Configuration engine which <see cref="T:System.Action`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/>.</param>
            <returns>The <see cref="T:JinianNet.JNTemplate.TemplatingEngine"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Configure(JinianNet.JNTemplate.Configuration.IConfig)">
            <summary>
            Configuration engine which <see cref="T:JinianNet.JNTemplate.Runtime.IOptions"/>.
            </summary>
            <param name="option">The <see cref="T:JinianNet.JNTemplate.Runtime.IOptions"/>.</param>
            <returns>The <see cref="T:JinianNet.JNTemplate.TemplatingEngine"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.CompileFile(System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <summary>
            Compile a template with a given file
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="path">The fully qualified path of the file to load.</param>
            <param name="action">The <see cref="T:System.Action`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Compile(System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <summary>
            Compile a template with a given contents
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="content">The template contents.</param>
            <param name="action">The <see cref="T:System.Action`1"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.CreateContext">
            <summary>
            Creates template context.
            </summary>
            <returns>An instance of a <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.CreateTemplate(System.String)">
            <summary>
            Creates template with specified text.
            </summary>
            <param name="text">The template contents.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.CreateTemplate(System.String,System.String)">
            <summary>
            Creates template with specified text.
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="text">The template contents.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.LoadTemplate(System.String)">
            <summary>
            Loads the template on the specified path.
            </summary>
            <param name="path">The fully qualified path of the file to load.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.LoadTemplate(System.String,System.String)">
            <summary>
            Loads the template on the specified path.
            </summary>
            <param name="name">Unique key of the template</param>
            <param name="path">The fully qualified path of the file to load.</param>
            <returns>An instance of a template.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Parse``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Parse(System.String,System.Action{JinianNet.JNTemplate.TemplateContext})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Parse``1(System.IO.FileInfo,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Parse(System.IO.FileInfo,System.Action{JinianNet.JNTemplate.TemplateContext})">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.AppendResourcePath(System.String)">
            <summary>
            Appends the specified directory name to the resource path list.
            </summary>
            <param name="path">The name of the directory to be appended to the resource path.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.UseLoader(JinianNet.JNTemplate.Resources.IResourceLoader)">
            <summary>
            Sets an <see cref="T:JinianNet.JNTemplate.Resources.IResourceLoader"/> values from engine.
            </summary>
            <param name="loader">The <see cref="T:JinianNet.JNTemplate.Resources.IResourceLoader"/> to add set.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.UseScopeProvider(JinianNet.JNTemplate.IScopeProvider)">
            <summary>
            Sets an <see cref="T:JinianNet.JNTemplate.IScopeProvider"/> values from engine.
            </summary>
            <param name="provider">The <see cref="T:JinianNet.JNTemplate.IScopeProvider"/> to add set.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.UseCache(JinianNet.JNTemplate.Caching.ICache)">
            <summary>
            Sets an <see cref="T:JinianNet.JNTemplate.Caching.ICache"/> values from engine.
            </summary>
            <param name="cache">The <see cref="T:JinianNet.JNTemplate.Caching.ICache"/> to add set.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.UseOptions(JinianNet.JNTemplate.Runtime.IOptions)">
            <summary>
            Initialize the engine with default <see cref="T:JinianNet.JNTemplate.Runtime.IOptions"/>.
            </summary>
            <param name="options">The <see cref="T:JinianNet.JNTemplate.Runtime.IOptions"/> to add set.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.UseDefaultOptions">
            <summary>
            Initialize the engine with default options.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.UseCompileEngine">
            <summary>
            Enable compilation mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.UseInterpretationEngine">
            <summary>
            Disable compilation mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Clean">
            <summary>
            Clear compiled object and cache.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IEngine.Register``1(System.Func{JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.Nodes.ITag},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.MethodInfo},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type},System.Int32)">
            <summary>
            Register an new tag.
            </summary>
            <typeparam name="T">Type of the new tag. </typeparam>
            <param name="parseMethod">parser of the new tag.</param>
            <param name="compileMethod">compile method of the new tag.</param>
            <param name="guessMethod">guess method of the new tag.</param>
            <param name="index">The zero-based index.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.IExecutor">
            <summary>
            Represents an executor.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IExecutor.Execute">
            <summary>
            Execute the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IExecutor.ExecuteAsync">
            <summary>
            Asynchronously execute the object.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.IExecutor`1">
            <summary>
            Represents an executor.
            </summary>
            <typeparam name="T">The type of return object.</typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.IExecutor`1.Execute">
            <summary>
            Execute the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IExecutor`1.ExecuteAsync">
            <summary>
            Asynchronously execute the object.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.InterpretResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.InterpretResult.#ctor(JinianNet.JNTemplate.Nodes.ITag[])">
            <summary>
            
            </summary>
            <param name="tags"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.InterpretResult.Tags">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.InterpretResult.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.InterpretResult.RenderAsync(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.IResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IResult.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            Performs the render for a template.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.IResult.RenderAsync(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext,System.Threading.CancellationToken)">
            <summary>
            Performs the render for a template.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <param name="cancellationToken">See the <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.IScopeProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IScopeProvider.CreateScope">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.ITemplate">
            <summary>
            A interface for template
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.ITemplate.Context">
            <summary>
            Gets or sets the context of the template.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.ITemplate.TemplateKey">
            <summary>
            Gets or sets the Unique key of the template.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.ITemplate.Render(System.IO.TextWriter)">
            <summary>
            Performs the render for a template.
            </summary>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.ITemplate.EnableCompile">
            <summary>
            Enable or disenable the compile mode.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.ITemplate.Set``1(System.String,``0)">
            <summary>
            Set a new value for variables.
            </summary>
            <param name="key">The key of the element to get</param> 
            <param name="value">The element with the specified key.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.ITemplate.RenderAsync(System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Performs the render for a template.
            </summary>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="cancellationToken">See the <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.IVariableScope">
            <summary>
            Variable Scope
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.Clear(System.Boolean)">
            <summary>
            Removes all items from the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.
            </summary>
            <param name="all">is removes all</param>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.Clear">
            <summary>
            Removes all items from the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.IVariableScope.Parent">
            <summary>
            gets the parent from the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.Update``1(System.String,``0)">
            <summary>
            update the element with the specified key from the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.</param>
            <param name="value">The value with the specified key.</param>
            <returns>true if the element is successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>. contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.</param>
            <returns>true if the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.</returns>
        </member>
        <member name="P:JinianNet.JNTemplate.IVariableScope.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.GetType(System.String)">
            <summary>
            Get a <see cref="T:System.Type"/> for variables
            </summary>
            <param name="key">The key of the element to get</param> 
            <returns>The <see cref="T:System.Type"/> with the specified key.</returns>
        </member>
        <member name="P:JinianNet.JNTemplate.IVariableScope.Item(System.String)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.Set``1(System.String,``0)">
            <summary>
            Set a new value for variables.
            </summary>
            <param name="key">The key of the element to get</param> 
            <param name="value">The element with the specified key.</param>
            <typeparam name="T">The type of elements in the  <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.</typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.IVariableScope.Set(System.String,System.Object,System.Type)">
            <summary>
            Set a new <see cref="T:System.Object"/> for variables
            </summary>
            <param name="key">The key of the element to get</param> 
            <param name="value">The element with the specified key.</param>
            <param name="type"><see cref="T:System.Type"/> of the value.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.IVariableScope.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/>  containing the keys of the <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.LexerMode">
            <summary>
            Represents an enumeration value for a lexical analysis pattern.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:JinianNet.JNTemplate.LexerMode.None">
            <summary>
            None。
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.LexerMode.EnterLabel">
            <summary>
            Enter。
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.LexerMode.LeaveLabel">
            <summary>
            Leave。
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ArithmeticTag">
            <summary>
            ArithmeticTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ArrayTag">
            <summary>
            ArrayTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ArrayTag.Value">
            <summary>
            Gets or sets the value of the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BasisTag">
            <summary>
            BasisTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BlockTag">
            <summary>
            BlockTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BodyTag">
            <summary>
            BodyTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BooleanTag">
            <summary>
            BooleanTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ChildrenTag">
            <summary>
            ChildrenTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ChildrenTag.Parent">
            <summary>
            Gets or sets the parent tag of the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.CommentTag">
            <summary>
            CommentTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.CommentTag.Out">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.CommentTag.ToString">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ComplexTag">
            <summary>
            ComplexTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ElseifTag">
            <summary>
            ElseifTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ElseifTag.Out">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ElseifTag.Condition">
            <summary>
            Gets or sets the condition of the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ElseTag">
            <summary>
            ElseTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.EndTag">
            <summary>
            EndTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.EndTag.Out">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ForeachTag">
            <summary>
            ForeachTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForeachTag.Name">
            <summary>
            Gets or sets node name of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForeachTag.Source">
            <summary>
            Gets or sets data source of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForeachTag.Out">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ForTag">
            <summary>
            ForTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForTag.Initial">
            <summary>
            Gets or sets the initial of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForTag.Condition">
            <summary>
            Gets or sets the condition of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForTag.Do">
            <summary>
            do things.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForTag.Out">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.FunctaionTag">
            <summary>
            FunctaionTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.FunctaionTag.Name">
            <summary>
            The method name of the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.IfTag">
            <summary>
            IfTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.IfTag.Out">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.IncludeTag">
            <summary>
            IncludeTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.IncludeTag.Path">
            <summary>
            The path of a tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.IndexValueTag">
            <summary>
            IndexValueTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.IndexValueTag.Index">
            <summary>
            The zero-based index in the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ITag">
            <summary>
            ITag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.Children">
            <summary>
            Gets the childer of the tag.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.ITag.AddChild(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Adds an tag to the end of the children.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.FirstToken">
            <summary>
            Gets or sets the first token of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.LastToken">
            <summary>
            Gets or sets the last token of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.Out">
            <summary>
            Gets or sets the output mode
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.Previous">
            <summary>
            Gets or sets the output mode
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ITypeTag">
            <summary>
            ITypeTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITypeTag.Value">
            <summary>
            Gets or sets the value of the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.JsonTag">
            <summary>
            JsonTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.JsonTag.Dict">
            <summary>
            Gets or sets the data of the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.LayoutTag">
            <summary>
            LayoutTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.LoadTag">
            <summary>
            LoadTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.LoadTag.Path">
            <summary>
            The path of a tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.LogicTag">
            <summary>
            LogicTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.NullTag">
            <summary>
            NullTag
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.NullTag.ToString">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.NumberTag">
            <summary>
            NumberTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.OperatorTag">
            <summary>
            OperatorTag
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.OperatorTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Nodes.OperatorTag"/> class
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.OperatorTag.#ctor(JinianNet.JNTemplate.Nodes.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Nodes.OperatorTag"/> class
            </summary>
            <param name="token">The <see cref="T:JinianNet.JNTemplate.Nodes.Token"/>.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ReferenceTag">
            <summary>
            ReferenceTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ReferenceTag.Child">
            <summary>
             Gets the child of the tag.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.ReferenceTag.AddChild(JinianNet.JNTemplate.Nodes.ITag)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.SetTag">
            <summary>
            SetTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.SetTag.Name">
            <summary>
             Gets the name of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.SetTag.Value">
            <summary>
             Gets the value of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.SetTag.Out">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.SpecialTag">
            <summary>
            SpecialTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.StringTag">
            <summary>
            StringTag
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.Tag">
            <summary>
            Base class of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.Children">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.FirstToken">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.LastToken">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.Out">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.Previous">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Tag.AddChild(JinianNet.JNTemplate.Nodes.ITag)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TagCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TagCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TagCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.Add(JinianNet.JNTemplate.Nodes.ITag)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.Contains(JinianNet.JNTemplate.Nodes.ITag)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.CopyTo(JinianNet.JNTemplate.Nodes.ITag[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TagCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.Remove(JinianNet.JNTemplate.Nodes.ITag)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.ToArray">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.IndexOf(JinianNet.JNTemplate.Nodes.ITag)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.Insert(System.Int32,JinianNet.JNTemplate.Nodes.ITag)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TagExtensions">
            <summary>
            Extensions methods for <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagExtensions.ToSource(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Returns a source code that represents the current tag.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <returns>The source code.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TagExtensions.ToString(JinianNet.JNTemplate.Nodes.TextTag,JinianNet.JNTemplate.OutMode)">
            <summary>
            Returns tag instance of <see cref="T:System.String"/> 
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.TextTag"/> </param>
            <param name="mode">The <see cref="T:JinianNet.JNTemplate.OutMode"/></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TextTag">
            <summary>
            TextTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TextTag.Text">
            <summary>
             Gets the text of the tag.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TextTag.ToString">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.Token">
            <summary>
            TOKEN
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.BeginLine">
            <summary>
            Gets or sets the start line of the token.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.BeginColumn">
            <summary>
            Gets or sets the start cloumn of the token.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.EndLine">
            <summary>
            Gets or sets the end line of the token.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.EndColumn">
            <summary>
            Gets or sets the end cloumn of the token.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.Text">
            <summary>
            Gets or sets the text of the token.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.TokenKind">
            <summary>
            Gets or sets the kind of the token.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Token.#ctor(JinianNet.JNTemplate.TokenKind,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Nodes.Token"/> class
            </summary>
            <param name="kind">The <see cref="P:JinianNet.JNTemplate.Nodes.Token.TokenKind"/>.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.Next">
            <summary>
            Gets or sets the  next element of the collection.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Token.ToString">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Token.CompareTo(JinianNet.JNTemplate.Nodes.Token)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TokenCollection">
            <summary>
            The collection of token.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> class
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> class
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor(System.Collections.Generic.IEnumerable{JinianNet.JNTemplate.Nodes.Token})">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> class
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor(System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.Token},System.Int32,System.Int32)">
            <summary> 
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="start">The zero-based index in collection at which copying begins.</param>
            <param name="end">The zero-based index in collection at which copying ended.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.First">
            <summary>
            Returns the first element of a collection.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Last">
            <summary>
            Returns the last element of a collection.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.ToString">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.IndexOf(JinianNet.JNTemplate.Nodes.Token)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Insert(System.Int32,JinianNet.JNTemplate.Nodes.Token)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Item(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/>.
            </summary>
            <param name="start">The zero-based <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> index at which the range starts.</param>
            <param name="end">The zero-based <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> index at which the range ends.</param>
            <returns>A copy of a range of elements in the source <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/>.</returns>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Add(JinianNet.JNTemplate.Nodes.Token)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Contains(JinianNet.JNTemplate.Nodes.Token)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.CopyTo(JinianNet.JNTemplate.Nodes.Token[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Remove(JinianNet.JNTemplate.Nodes.Token)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Equals(JinianNet.JNTemplate.Nodes.TokenCollection)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TokenCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollectionExtensions.TrimParentheses(JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            
            </summary>
            <param name="coll">The <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollectionExtensions.InsideParentheses(JinianNet.JNTemplate.Nodes.TokenCollection,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="coll">The <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/>.</param>
            <param name="start">The zero-based <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> index at which the range starts.</param>
            <param name="end">The zero-based <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> index at which the range ends.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollectionExtensions.Split(JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.TokenKind[])">
            <summary>
            Splits a collection into substrings that are based on the kind in the separator array.
            </summary>
            <param name="coll">The <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/>.</param>
            <param name="kinds">A kind array.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollectionExtensions.Split(JinianNet.JNTemplate.Nodes.TokenCollection,System.Int32,System.Int32,JinianNet.JNTemplate.TokenKind[])">
            <summary>
            Splits a collection into substrings that are based on the kind in the separator array.
            </summary>
            <param name="coll">The <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/>.</param>
            <param name="start">The zero-based <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> index at which the range starts.</param>
            <param name="end">The zero-based <see cref="T:JinianNet.JNTemplate.Nodes.TokenCollection"/> index at which the range ends.</param>
            <param name="kinds">A kind array.</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TypeTag`1">
            <summary>
            The tag of base type .
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TypeTag`1.Value">
            <summary>
            Gets or sets the value of the tag.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TypeTag`1.JinianNet#JNTemplate#Nodes#ITypeTag#Value">
            <summary>
            Gets or sets the value of the tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.VariableTag">
            <summary>
            variable
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.VariableTag.Name">
            <summary>
            The name of tag.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.None">
            <summary>
            <![CDATA[none]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Add">
            <summary>
            <![CDATA[+]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Subtract">
            <summary>
            <![CDATA[-]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Multiply">
            <summary>
            <![CDATA[*]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Remainder">
            <summary>
            <![CDATA[%]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Divided">
            <summary>
            <![CDATA[/]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LogicalOr">
            <summary>
            <![CDATA[|]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Or">
            <summary>
            <![CDATA[||]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LogicAnd">
            <summary>
            <![CDATA[&]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.And">
            <summary>
            <![CDATA[&&]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.GreaterThan">
            <summary>
            <![CDATA[>]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.GreaterThanOrEqual">
            <summary>
            <![CDATA[>=]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LessThan">
            <summary>
            <![CDATA[<]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LessThanOrEqual">
            <summary>
            <![CDATA[<=]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Equal">
            <summary>
            <![CDATA[==]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.NotEqual">
            <summary>
            <![CDATA[!=]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LeftParentheses">
            <summary>
            <![CDATA[(]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.RightParentheses">
            <summary>
            <![CDATA[)]]>
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.OutMode">
            <summary>
            output mode of the tag.
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.OutMode.None">
            <summary>
            none
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.OutMode.StripWhiteSpace">
            <summary>
            StripWhiteSpace
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.OutMode.Auto">
            <summary>
            auto
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ArithmeticRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.ArithmeticTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArithmeticRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArithmeticRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArithmeticRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArithmeticRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ArrayRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.ArrayTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArrayRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArrayRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArrayRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ArrayRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.BodyRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.BodyTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BodyRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BodyRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BodyRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BodyRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.BooleanRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.BooleanTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BooleanRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BooleanRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BooleanRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BooleanRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.CommentRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.CommentTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.CommentRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.CommentRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.CommentRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.CommentRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ComplexRegistrar">
            <summary>
            The complex tags registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ComplexRegistrar.Regiser(JinianNet.JNTemplate.Hosting.IHost)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ComplexRegistrar.Analysis(System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.ITag},System.Collections.Generic.IList{JinianNet.JNTemplate.Operator})">
            <summary>
            
            </summary>
            <param name="tags"></param>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ComplexRegistrar.Analysis(System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.ITag},System.Boolean)">
            <summary>
            
            </summary>
            <param name="tags"></param>
            <param name="isLogical"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ComplexRegistrar.AddRange(JinianNet.JNTemplate.Nodes.ITag,System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.ITag})">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="list"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ComplexRegistrar.Eval(System.Collections.Generic.List{System.Object},System.Boolean,System.Object)">
            <summary>
            eval expression
            </summary>
            <param name="list">list</param>
            <param name="isOperator"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ElseifRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.ElseifTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseifRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseifRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseifRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseifRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ElseRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.ElseTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.EndRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.EndTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.EndRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.EndRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.EndRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.EndRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ForeachRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.ForeachTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForeachRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForeachRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForeachRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForeachRegistrar.EnumerableForeachCompile(JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ForeachTag,System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="isAsync"></param>
            <param name="c"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForeachRegistrar.ArrayForeachCompile(JinianNet.JNTemplate.CodeCompilation.CompileContext,JinianNet.JNTemplate.Nodes.ForeachTag,System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="c"></param>
            <param name="sourceType"></param>
            <param name="isAsync"></param> 
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForeachRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ForRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.ForTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.FunctionRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.FunctaionTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.FunctionRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.FunctionRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.FunctionRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.FunctionRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.IfRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.IfTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IfRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IfRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IfRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IfRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.IncludeRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.IncludeTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IncludeRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IncludeRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IncludeRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IncludeRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.IndexValueRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.IndexValueTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IndexValueRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IndexValueRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IndexValueRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IndexValueRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ITagParser">
            <summary>
            The tag parser.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ITagParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            Parsing then tag.
            </summary>
            <param name="parser">The <see cref="T:JinianNet.JNTemplate.TemplateParser"/>.</param>
            <param name="tc">The token collection.</param>
            <returns>An tag.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.JsonRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.JsonTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.JsonRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.JsonRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.JsonRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.JsonRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.LayoutRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.LayoutTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LayoutRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LayoutRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LayoutRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LayoutRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.LoadRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.LoadTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LoadRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LoadRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LoadRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LoadRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.LogicRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.LogicTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.Eval(System.Collections.Generic.List{System.Object},System.Boolean,System.Object)">
            <summary>
            eval expression
            </summary>
            <param name="list">list</param>
            <param name="isOperator"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.Analysis(System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.ITag},System.Collections.Generic.IList{JinianNet.JNTemplate.Operator})">
            <summary>
            
            </summary>
            <param name="tags"></param>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.Analysis(System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.ITag},System.Boolean)">
            <summary>
            
            </summary>
            <param name="tags"></param>
            <param name="isLogical"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LogicRegistrar.AddRange(JinianNet.JNTemplate.Nodes.ITag,System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.ITag})">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="list"></param>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.NullRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.NullTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NullRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NullRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NullRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NullRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.NumberRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.NumberTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NumberRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NumberRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NumberRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NumberRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.OperatorRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Parsers.OperatorRegistrar"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.OperatorRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.OperatorRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.OperatorRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.OperatorRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ReferenceRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.ReferenceTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ReferenceRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ReferenceRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ReferenceRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ReferenceRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.SetRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.SetTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.SetRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.SetRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.SetRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.SetRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.StringRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.StringTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.StringRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.StringRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.StringRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.StringRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.TagParser">
            <summary>
            The tag parser.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Parsers.TagParser"/> class
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Parsers.TagParser.Count">
            <summary>
             Gets the number of elements contained in <see cref="T:JinianNet.JNTemplate.Parsers.TagParser"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagParser.Parsing(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagParser.Register(System.Func{JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.Nodes.ITag})">
            <summary>
            Register the new parse method.
            </summary>
            <param name="func">The parse mehtod.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagParser.Register(System.Func{JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.Nodes.ITag},System.Int32)">
            <summary>
            Register the new parse method.
            </summary>
            <param name="func">The parse mehtod.</param>
            <param name="index">The zero-based index in the <see cref="T:JinianNet.JNTemplate.Parsers.TagParser"/>. </param>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagParser.Clear">
            <summary>
            Removes all elements from <see cref="T:JinianNet.JNTemplate.Parsers.TagParser"/>
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.TagRegistrar`1">
            <summary>
            The base registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagRegistrar`1.Regiser(JinianNet.JNTemplate.Hosting.IHost)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagRegistrar`1.BuildParseMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagRegistrar`1.BuildCompileMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagRegistrar`1.BuildGuessMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TagRegistrar`1.BuildExcuteMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.TextRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.TextTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TextRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TextRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TextRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.TextRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.VariableRegistrar">
            <summary>
            The <see cref="T:JinianNet.JNTemplate.Nodes.VariableTag"/> registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.VariableRegistrar.BuildParseMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.VariableRegistrar.BuildCompileMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.VariableRegistrar.BuildGuessMethod">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.VariableRegistrar.BuildExcuteMethod">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.IRegistrar">
            <summary>
            The tag registrar
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IRegistrar.Regiser(JinianNet.JNTemplate.Hosting.IHost)">
            <summary>
            Regiser the tag.
            </summary>
            <param name="host">The <see cref="T:JinianNet.JNTemplate.Hosting.IHost"/>.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.FileLoader">
            <summary>
            The resource loader
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.Load(JinianNet.JNTemplate.Context,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.Find(JinianNet.JNTemplate.Context,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.GetDirectoryName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.Load(System.String,System.Text.Encoding,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.FindFullPath(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.FindPath(System.String,System.String[])">
            <summary>
            Find the specified file
            </summary>
            <param name="paths">The resource search directory.</param>
            <param name="filename">The file name.</param>
            <returns>The full path.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.LoadResource(System.String,System.Text.Encoding)">
            <summary>
            Load the resource
            </summary>
            <param name="fullPath">The fully qualified path or file name to load.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/>.</param> 
            <returns>An string.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.NormalizePath(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.LoadAsync(System.String,System.Text.Encoding,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.LoadResourceAsync(System.String,System.Text.Encoding)">
            <summary>
            Load the resource
            </summary>
            <param name="fullPath">The fully qualified path or file name to load.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/>.</param> 
            <returns>An string.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.LoadAsync(JinianNet.JNTemplate.Context,System.String)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.IOExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IOExtensions.IsAbsolutePath(System.String)">
            <summary>
            Returns a value that indicates whether the specified file path is fixed to a  specific drive or UNC path.
            </summary>
            <param name="path">A file path.</param>
            <returns>true if the path is fixed to a specific drive or UNC path; false if the path  is relative to the current drive or working directory.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IOExtensions.IsWindowsAbsolutePath(System.String)">
            <summary>
            Whether the windows path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IOExtensions.IsValidDriveChar(System.Char)">
            <summary>
            Returns true if the given character is a valid drive letter
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IOExtensions.IsUnixAbsolutePath(System.String)">
            <summary>
            Whether the unix path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.IReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IReader.ReadToEnd(JinianNet.JNTemplate.Context)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IReader.ReadToEndAsync(JinianNet.JNTemplate.Context)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.IResourceLoader">
            <summary>
            The resource loader
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IResourceLoader.Load(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            Loads the resource on the specified path.
            </summary>
            <param name="filename">The fully qualified path or file name of the file to load.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param> 
            <returns>An instance of a resource.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IResourceLoader.Find(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            Search for file full path.
            </summary>
            <param name="filename">The fully qualified path or file name of the file to load.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param> 
            <returns>The file full path of the resource.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IResourceLoader.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="fullPath">The path of a file.</param>
            <returns>Directory information for path, or null if path denotes a root directory or is null.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IResourceLoader.LoadAsync(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            Loads the resource on the specified path.
            </summary>
            <param name="filename">The fully qualified path or file name of the file to load.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param> 
            <returns>An instance of a resource.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.NullTextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.NullTextReader.ReadToEnd(JinianNet.JNTemplate.Context)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.NullTextReader.ReadToEnd">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.NullTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.NullTextReader.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.NullTextReader.ReadToEndAsync(JinianNet.JNTemplate.Context)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.ResourceInfo">
            <summary>
            The resource info.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Resources.ResourceInfo.Content">
            <summary>
            Gets or sets the contents of the resource.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Resources.ResourceInfo.FullPath">
            <summary>
            Gets or sets the fully qualified path of the resource.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.ResourceReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.ResourceReader.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param> 
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.ResourceReader.ReadToEnd(JinianNet.JNTemplate.Context)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.ResourceReader.ReadToEndAsync(JinianNet.JNTemplate.Context)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.ResourceReader.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.StringReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.StringReader.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.StringReader.ReadToEnd(JinianNet.JNTemplate.Context)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.StringReader.ReadToEndAsync(JinianNet.JNTemplate.Context)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.StringReader.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Runtime.IOptions">
            <summary>
            Represents an global options.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.DisableeLogogram">
            <summary>
            Gets or sets whether disablee logogram .
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.TagPrefix">
            <summary>
            Gets or sets the tag prefix .
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.TagSuffix">
            <summary>
            Gets or sets the tag suffix.
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.TagFlag">
            <summary>
            Gets or sets the tag flag.
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.Encoding">
            <summary>
            Gets or sets the <see cref="P:JinianNet.JNTemplate.Runtime.IOptions.Encoding"/> of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.EnableCompile">
            <summary>
            Enable or disenable the compile mode.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.Mode">
            <summary>
            Enable or disenable the compile mode.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.EnableTemplateCache">
            <summary>
            Enable or disenable the cache.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.EnableCache">
            <summary>
            Enable or disenable the cache.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.ThrowExceptions">
            <summary>
            Gets or sets whether throw exceptions.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.TypeDetectPattern">
            <summary>
            Gets or sets the detect patterns.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.OutMode">
            <summary>
            Gets or sets the output mode.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.Data">
            <summary>
            Gets or sets the global data of the engine.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.IOptions.ResourceDirectories">
            <summary>
            Gets or sets the global resource directories of the engine.
            </summary>
            <value></value>
        </member>
        <member name="T:JinianNet.JNTemplate.Runtime.ResultCollection`1">
             <summary>
            Provides the class for a template collection.
             </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.ResultCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Runtime.ResultCollection`1"/> class
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.ResultCollection`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:JinianNet.JNTemplate.Runtime.ResultCollection`1"/>.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.ResultCollection`1.Item(System.String)">
            <summary>
            Gets or sets the element at the specified name.
            </summary>
            <param name="name">The name of the element to get or set.</param>
            <returns>The element at the specified name.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.ResultCollection`1.Remove(System.String)">
            <summary>
            Removes the element at the specified name of the <see cref="T:JinianNet.JNTemplate.Runtime.ResultCollection`1"/>.
            </summary>
            <param name="name">The name of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. </returns>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.ResultCollection`1.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:JinianNet.JNTemplate.Runtime.ResultCollection`1"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.ResultCollection`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:JinianNet.JNTemplate.Runtime.ResultCollection`1"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.ResultCollection`1.GetOrAdd(System.String,System.Func{System.String,`0})">
            <summary>
            Adds a key/value pair to the <see cref="T:JinianNet.JNTemplate.Runtime.ResultCollection`1"/>. by using the specified function if the key does not already exist. Returns the new value, or the existing value if the key exists.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">he function used to generate a value for the key.</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the collection, or the new value if the key was not in the collection.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Runtime.RuntimeOptions">
            <summary>
            Represents an global options.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.RuntimeOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Runtime.RuntimeOptions"/> class
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.DisableeLogogram">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.TagPrefix">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.TagSuffix">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.TagFlag">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.Encoding">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.EnableCompile">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.EnableTemplateCache">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.EnableCache">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.ThrowExceptions">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.TypeDetectPattern">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.OutMode">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.Data">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.Mode">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeOptions.ResourceDirectories">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.Template">
            <summary>
            An template object.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Template.#ctor(JinianNet.JNTemplate.TemplateContext,JinianNet.JNTemplate.Resources.IReader)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.Template"/> class
            </summary>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <param name="reader">The template contents.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.Template.EnableCompile">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Template.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Template.Render(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Template.RenderAsync(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.Template.RenderAsync(System.IO.TextWriter,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateBase">
            <summary>
            The base class of template.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateBase.TemplateKey">
            <summary>
            Gets or sets the key(unique) of the template.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateBase.Context">
            <summary>
            Gets or sets the context of the template.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateBase.Set``1(System.String,``0)">
            <summary>
            Set a new value for variables.
            </summary>
            <param name="key">The key of the element to get</param> 
            <param name="value">The element with the specified key.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateContext">
            <summary>
            Context for template execution.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.#ctor(JinianNet.JNTemplate.IVariableScope,JinianNet.JNTemplate.Hosting.IHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.TemplateContext"/> class
            </summary>
            <param name="data">The <see cref="T:JinianNet.JNTemplate.IVariableScope"/>.</param>  
            <param name="hostEnvironment"></param> 
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.ExecutorBuilder">
            <summary>
            Gets the <see cref="P:JinianNet.JNTemplate.TemplateContext.ExecutorBuilder"/>
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.EnableTemplateCache">
            <summary>
            Enable or Disenable the cache.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.TempData">
            <summary>
            Gets or sets the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> of the context.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.AllErrors">
            <summary>
            Gets the <see cref="T:System.Exception"/> of the context.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.Error">
            <summary>
            Gets the first <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.AddError(System.Exception)">
            <summary>
            Adds an <see cref="T:System.Exception"/> to the end of the context.
            </summary>
            <param name="e">The <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.ClearError">
            <summary>
            Removes all <see cref="T:System.Exception"/> from context.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.
            </summary>
            <returns>A shallow copy of the current <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.CreateContext(JinianNet.JNTemplate.TemplateContext)">
            <summary>
            Creates an instance from the specified <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.
            </summary>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateContextExtensions">
            <summary>
            Extensions methods for <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.GetResourceDirectories(JinianNet.JNTemplate.Context)">
            <summary>
            Returns the names of directories (including their paths) in the <see cref="T:JinianNet.JNTemplate.Context"/>.
            </summary>
            <param name="ctx">The  <see cref="T:JinianNet.JNTemplate.Context"/>.</param>
            <returns>An array of the full names (including paths) of directories in the <see cref="T:JinianNet.JNTemplate.Context"/>.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.Load(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            Loads the contents of an resource file on the specified path.
            </summary>
            <param name="fileName">The path of the file to load.</param> 
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param>
            <returns>The loaded resource.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.LoadAsync(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            Loads the contents of an resource file on the specified path.
            </summary>
            <param name="fileName">The path of the file to load.</param> 
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param>
            <returns>The loaded resource.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.FindFullPath(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            Returns the full path in the resource directorys.
            </summary>
            <param name="fileName">The relative or absolute path to the file to search.</param> 
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param>
            <returns>The full path.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CreateVariableScope(JinianNet.JNTemplate.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> class
            </summary>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CreateVariableScope(JinianNet.JNTemplate.Context,JinianNet.JNTemplate.IVariableScope)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.IVariableScope"/> class
            </summary>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/></param>
            <param name="parent">The <see cref="T:JinianNet.JNTemplate.IVariableScope"/></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CopyTo(JinianNet.JNTemplate.TemplateContext,JinianNet.JNTemplate.CodeCompilation.CompileContext)">
            <summary>
            Copies a range of elements from an <see cref="T:JinianNet.JNTemplate.TemplateContext"/> starting at the first element and pastes them into another <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/> starting at the first element.
            </summary>
            <param name="ctx1">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/> that contains the data to copy.</param>
            <param name="ctx2">The <see cref="T:JinianNet.JNTemplate.CodeCompilation.CompileContext"/> that receives the data.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CreateTemplateLexer(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            Create an <see cref="T:JinianNet.JNTemplate.TemplateLexer"/> object.
            </summary>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param>
            <param name="text">The template contents.</param>
            <returns>An TemplateParser.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.InterpretTemplate(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.InterpretTemplate(JinianNet.JNTemplate.Context,System.String,JinianNet.JNTemplate.Resources.IReader)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="name"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.Lexer(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="text"></param> 
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CreateTemplateParser(JinianNet.JNTemplate.Context,JinianNet.JNTemplate.Nodes.Token[])">
            <summary>
            Create an <see cref="T:JinianNet.JNTemplate.TemplateParser"/> object.
            </summary>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.Context"/>.</param>
            <param name="ts">The token array.</param>
            <returns>An TemplateParser.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CompileFile(JinianNet.JNTemplate.TemplateContext,System.String)">
            <summary>
            Compiles and renders a template.
            </summary>
            <param name="path">The fully qualified path of the file to load.</param>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CompileAndRenderFile(JinianNet.JNTemplate.TemplateContext,System.String)">
            <summary>
            Compiles and renders a template.
            </summary>
            <param name="path">The fully qualified path of the file to load.</param>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CompileTemplate(JinianNet.JNTemplate.TemplateContext,System.String,JinianNet.JNTemplate.Resources.IReader)">
            <summary>
            Compiles and renders a template.
            </summary>
            <param name="reader"></param>
            <param name="context">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.Render(JinianNet.JNTemplate.TemplateContext,System.IO.TextWriter,JinianNet.JNTemplate.Nodes.ITag[])">
            <summary>
            Performs the render for a tags.
            </summary>
            <param name="ctx"></param>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="collection">The tags collection.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.ThrowException(JinianNet.JNTemplate.TemplateContext,JinianNet.JNTemplate.Exceptions.TemplateException,JinianNet.JNTemplate.Nodes.ITag,System.IO.TextWriter)">
            <summary>
            Throw exception.
            </summary>
            <param name="ctx"></param>
            <param name="e">Represents errors that occur during application execution.</param>
            <param name="tag">Represents errors tag.</param>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.RenderAsync(JinianNet.JNTemplate.TemplateContext,System.IO.TextWriter,JinianNet.JNTemplate.Nodes.ITag[],System.Threading.CancellationToken)">
            <summary>
            Performs the render for a tags.
            </summary>
            <param name="ctx"></param>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="collection">The tags collection.</param>
            <param name="cancellationToken">See the <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.ThrowExceptionAsync(JinianNet.JNTemplate.TemplateContext,JinianNet.JNTemplate.Exceptions.TemplateException,JinianNet.JNTemplate.Nodes.ITag,System.IO.TextWriter)">
            <summary>
            Throw exception.
            </summary>
            <param name="ctx"></param>
            <param name="e">Represents errors that occur during application execution.</param>
            <param name="tag">Represents errors tag.</param>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.Execute(JinianNet.JNTemplate.TemplateContext,JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            Execute the tags.
            </summary>
            <param name="tag">The <see cref="T:JinianNet.JNTemplate.Nodes.ITag"/>.</param>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.SetAnonymousObject(JinianNet.JNTemplate.TemplateContext,System.String,System.Object)">
            <summary>
            Set a anonymous object for variables.
            </summary>
            <param name="c">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <param name="key">The key of the element to get</param> 
            <param name="value">The value with the specified key.</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.SetAnonymousObject(JinianNet.JNTemplate.TemplateContext,System.String,System.Object,System.Type)">
            <summary>
            Set a anonymous object for variables.
            </summary>
            <param name="c">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param>
            <param name="key">The key of the element to get</param> 
            <param name="value">The value with the specified key.</param>
            <param name="anonymousType">The <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.Set(JinianNet.JNTemplate.TemplateContext,System.String,System.Object,System.Type)">
            <summary>
            Set a new value for variables.
            </summary>
            <param name="ctx">The <see cref="T:JinianNet.JNTemplate.TemplateContext"/>.</param> 
            <param name="key">The key of the element to get</param> 
            <param name="value">The element with the specified key.</param>
            <param name="type">The type with the specified key.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.Execute(JinianNet.JNTemplate.TemplateContext,System.String,JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="tag"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateExtensions">
            <summary>
            Extensions methods for <see cref="T:JinianNet.JNTemplate.ITemplate"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.Render(JinianNet.JNTemplate.ITemplate)">
            <summary>
            Renders the template.
            </summary>
            <param name="template">The <see cref="T:JinianNet.JNTemplate.ITemplate"/>.</param>
            <returns>The template contents.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.Set(JinianNet.JNTemplate.ITemplate,System.String,System.Object,System.Type)">
            <summary>
            Set a new value for variables.
            </summary>
            <param name="template">The <see cref="T:JinianNet.JNTemplate.ITemplate"/>.</param>
            <param name="key">The key of the element to get</param> 
            <param name="value">The element with the specified key.</param>
            <param name="type">The type with the specified key.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.Set``1(JinianNet.JNTemplate.ITemplate,System.String,``0)">
            <summary>
            Set a new value for variables.
            </summary>
            <param name="template">The <see cref="T:JinianNet.JNTemplate.ITemplate"/>.</param>
            <param name="key">The key of the element to get</param> 
            <param name="value">The element with the specified key.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.SetStaticType(JinianNet.JNTemplate.ITemplate,System.String,System.Type)">
            <summary>
            Set a static type for variables.
            </summary>
            <param name="template">The <see cref="T:JinianNet.JNTemplate.ITemplate"/>.</param>
            <param name="key">The key of the element to get</param> 
            <param name="type">The type with the specified key.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.SetStaticType(JinianNet.JNTemplate.ITemplate,System.Type)">
            <summary>
            Set a static type for variables.
            </summary>
            <param name="template">The <see cref="T:JinianNet.JNTemplate.ITemplate"/>.</param> 
            <param name="type">The type with the specified key.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.SetAnonymousObject(JinianNet.JNTemplate.ITemplate,System.String,System.Object)">
            <summary>
            Set a anonymous object for variables.
            </summary>
            <param name="template">The <see cref="T:JinianNet.JNTemplate.ITemplate"/>.</param>
            <param name="key">The key of the element to get</param> 
            <param name="value">The value with the specified key.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.RenderAsync(JinianNet.JNTemplate.ITemplate)">
            <summary>
            Renders the template.
            </summary>
            <param name="template">The <see cref="T:JinianNet.JNTemplate.ITemplate"/>.</param>
            <returns>The template contents.</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateLexer">
            <summary>
            The lexer of template.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.#ctor(System.String,System.String,System.String,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.TemplateLexer"/> class
            </summary>
            <param name="text">The template contents.</param>
            <param name="tagPrefix">the tag prefix .</param>
            <param name="tagSuffix">the tag suffix.</param>
            <param name="tagflag">the tag flag.</param>
            <param name="disableFlag">whether disablee logogram</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.Reset">
            <summary>
            Reset the <see cref="T:JinianNet.JNTemplate.TemplateLexer"/>.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateLexer.Current">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateLexer.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.Execute">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateParser">
            <summary>
            Provides methods for parsing template strings.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.#ctor(JinianNet.JNTemplate.Parsers.TagParser,JinianNet.JNTemplate.Nodes.Token[])">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.TemplateParser"/> class
            </summary> 
            <param name="p">The <see cref="T:JinianNet.JNTemplate.Parsers.TagParser"/>.</param>
            <param name="ts">The collection of tokens.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateParser.Current">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Reset">
            <summary>
            Reset the <see cref="T:JinianNet.JNTemplate.TemplateParser"/>.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Read">
            <summary>
            Reads the next tag from the tokens.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Read(JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            Reads the next tag from the tokens.
            </summary>
            <param name="tc">The collection of tokens.</param>
            <returns></returns>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateParser.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Dispose">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Execute">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateRender">
            <summary>
            A template for Render
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateRender.Reader">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextReader"/> of the template.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateRender.Render(System.IO.TextWriter)">
            <summary>
            Performs the render for a template.
            </summary>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateRender.RenderAsync(System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Performs the render for a template.
            </summary>
            <param name="writer">See the <see cref="T:System.IO.TextWriter"/>.</param>
            <param name="cancellationToken">See the <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplatingEngine">
            <summary>
            The template engine
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplatingEngine.HostEnvironment">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.TemplatingEngine.Mode">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.#ctor(JinianNet.JNTemplate.Hosting.IHostEnvironment)">
             <summary>
            
             </summary>
             Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.TemplatingEngine"/> class
             <param name="environment"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Configure(System.Action{JinianNet.JNTemplate.Runtime.IOptions})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Configure(JinianNet.JNTemplate.Configuration.IConfig)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.CompileFile(System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Compile(System.String,System.String,System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.CompileFile(System.IO.FileInfo[],System.Action{JinianNet.JNTemplate.CodeCompilation.CompileContext})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.CreateContext">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Parse``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Parse(System.String,System.Action{JinianNet.JNTemplate.TemplateContext})">
            <inheritdoc /> 
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Parse``1(System.IO.FileInfo,``0)">
            <inheritdoc /> 
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Parse(System.IO.FileInfo,System.Action{JinianNet.JNTemplate.TemplateContext})">
            <inheritdoc /> 
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Parse``1(System.String,JinianNet.JNTemplate.Resources.IReader,``0)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Parse(System.String,JinianNet.JNTemplate.Resources.IReader,System.Action{JinianNet.JNTemplate.TemplateContext})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.CreateTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.CreateTemplate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.LoadTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.LoadTemplate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.AppendResourcePath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.GetEnvironmentVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.SetEnvironmentVariable(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.UseLoader(JinianNet.JNTemplate.Resources.IResourceLoader)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.UseScopeProvider(JinianNet.JNTemplate.IScopeProvider)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.UseCache(JinianNet.JNTemplate.Caching.ICache)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.UseOptions(JinianNet.JNTemplate.Runtime.IOptions)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.UseDefaultOptions">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.UseCompileEngine">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.UseInterpretationEngine">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Clean">
            <summary>
            Clear compiled object or cache.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Register``1(System.Func{JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.Nodes.ITag},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.MethodInfo},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.RegisterParseFunc(System.Func{JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection,JinianNet.JNTemplate.Nodes.ITag},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.RegisterCompileFunc``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Reflection.MethodInfo})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.RegisterGuessFunc``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.CodeCompilation.CompileContext,System.Type})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.RegisterExecuteFunc``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.TemplatingEngine.Reset">
            <inheritdoc />
        </member>
        <member name="T:JinianNet.JNTemplate.TokenKind">
            <summary>
            The token kind.
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.TextData">
            <summary>
            The text inside the tags 
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Tag">
            <summary>
            tag
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.TagStart">
            <summary>
            Start tag ${
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.TagEnd">
            <summary>
            End tag }
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.String">
            <summary>
            string.
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Number">
            <summary>
            number
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.LeftBracket">
            <summary>
            Left Bracket [
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.RightBracket">
            <summary>
            Right Bracket ]
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.LeftParentheses">
            <summary>
            Left Parentheses (
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.RightParentheses">
            <summary>
            Right Parentheses )
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.LeftBrace">
            <summary>
            Left Brace {
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.RightBrace">
            <summary>
            Right Brace }
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.NewLine">
            <summary>
            New Line
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Dot">
            <summary>
            Dot .
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.StringStart">
            <summary>
            Start String "
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.StringEnd">
            <summary>
            End String "
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Space">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Punctuation">
            <summary>
            Punctuation (,:...)
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Operator">
            <summary>
            Operator (+,-,*,/,%..)
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Logic">
            <summary>
            <![CDATA[Logic Operator (>,>=,==,!=,<,<=,||,&&)]]> 
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Arithmetic">
            <summary>
            Arithmetic Operator (+,-,*,/,%..)
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Comma">
            <summary>
            Comma (,)
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Colon">
            <summary>
            Colon (:)
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Comment">
            <summary>
            Comment ($* comment *$)
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.EOF">
            <summary>
            eof
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.TypeDetect">
            <summary>
            To type detect patterns.
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TypeDetect.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TypeDetect.Standard">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TypeDetect.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TypeDetect.Absolute">
            <summary>
            Absolute
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Utility">
            <summary>
            Contains utilities that the jntemplate uses.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.StringToBoolean(System.String)">
            <summary>
            Converts the specified string representation of a logical value to its Boolean  equivalent.
            </summary>
            <param name="input">A string containing the value to convert.</param>
            <returns>true if value is equivalent to True String; false if value is equivalent</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A string containing the value to convert.</param>
            <returns>false if value is nul or "";otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A number containing the value to convert.</param>
            <returns>false if value is 0;otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A double containing the value to convert.</param>
            <returns>false if value is 0;otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A decimal containing the value to convert.</param>
            <returns>false if value is 0;otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A Int16 containing the value to convert.</param>
            <returns>false if value is 0;otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A Int64 containing the value to convert.</param>
            <returns>false if value is 0;otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A float containing the value to convert.</param>
            <returns>false if value is 0;otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its <see cref="T:System.Boolean"/> equivalent.
            </summary>
            <param name="input">A object containing the value to convert.</param>
            <returns>false if value is null;otherwise, true.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.IsLetter(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as a Unicode letter.
            </summary>
            <param name="value">The Unicode character to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.AllowWord(System.Char)">
            <summary>
            Is it a letter, a combination of underscores and numbers
            </summary>
            <param name="value">The Unicode character to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.IsEqual(System.String,System.String)">
            <summary>
            Determines whether two specified System.String objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="x">The first string to compare, or null.</param>
            <param name="y">The second string to compare, or null.</param>
            <returns>true if the value of the a parameter is equal to the value of the b parameter; otherwise, false.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.GenerateDefaultValue``1">
            <summary>
            Generates default values based on the specified type
            </summary>
            <typeparam name="T">the Type of the object.</typeparam>
            <returns>The efault values.</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ExcuteTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ExcuteTaskAsync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ExcuteTaskAsync(System.Threading.Tasks.Task)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.WriteAsync(System.IO.TextWriter,System.String)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.WriteAsync(System.IO.TextWriter,System.Object)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.WriteAsync(System.IO.TextWriter,System.ValueType)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.WriteTaskAsync``1(System.IO.TextWriter,System.Threading.Tasks.Task{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.VariableElement">
            <summary>
            Represents an variable element.
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableElement.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.VariableElement"/> class
            </summary>
            <param name="type">The type.see the <see cref="P:JinianNet.JNTemplate.VariableElement.Type"/>.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement.Type">
            <summary>
            Gets or sets the type of the element.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement.Value">
            <summary>
            Gets or sets the value of the element.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.VariableElement`1">
            <summary>
            Represents an variable element.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement`1.Type">
            <summary>
            Gets or sets the type of the element.
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement`1.Value">
            <summary>
            Gets or sets the value of the element.
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.VariableScope">
            <summary>
            Variable Scope
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableScope.Parent">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.#ctor(JinianNet.JNTemplate.IVariableScope)">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.VariableScope"/> class
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JinianNet.JNTemplate.VariableScope"/> class
            </summary> 
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Clear(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Clear">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.VariableScope.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Update``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.VariableScope.Count">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.GetElement(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.GetType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Set``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Set(System.String,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.SetElement(System.String,JinianNet.JNTemplate.VariableElement)">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:JinianNet.JNTemplate.VariableScope.Keys">
            <inheritdoc />
        </member>
    </members>
</doc>
